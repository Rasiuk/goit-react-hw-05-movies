{"version":3,"file":"static/js/266.ebe7da8d.chunk.js","mappings":"8MAEaA,EAAUC,EAAAA,GAAAA,IAAH,6FAKPC,EAAKD,EAAAA,GAAAA,GAAH,kNASFE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,kDAGTI,EAASJ,EAAAA,GAAAA,IAAH,wCAGNK,EAAQL,EAAAA,GAAAA,GAAH,kD,SCpBLM,EAAW,SAAC,GAAsD,IAAD,IAAnDC,KAAQC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,GAAMC,EAAW,EAAXA,KAC3DC,EAAS,wDAAoDH,GACnE,OACE,yBACE,UAACR,EAAD,CAAWY,GAAI,CAAEC,SAAS,WAAD,OAAaJ,IAAQK,MAAO,CAAEJ,KAAMA,GAA7D,WACE,SAACR,EAAD,CAAQa,IAAKJ,EAAWK,IAAKV,KAC7B,SAACH,EAAD,UAAQG,GAAgBC,QAI/B,ECRYU,EAAc,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOZ,EAAkB,EAAlBA,MAAOI,EAAW,EAAXA,KAC1C,OACE,UAACb,EAAD,YACE,wBAAKS,KACL,SAACP,EAAD,UACGmB,EAAMC,KAAI,SAAAd,GACT,OAAO,SAACD,EAAD,CAAwBC,KAAMA,EAAMK,KAAMA,GAA3BL,EAAKI,GAC5B,QAIR,C,uFCED,UAba,WACX,IAAMW,GAAWC,EAAAA,EAAAA,MAEjB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,OALAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAkBC,MAAK,SAAAC,GACrBJ,EAAUI,EAAKA,KAAKC,QACrB,GACF,GAAE,KAED,SAAC,IAAD,CAAaX,MAAOK,EAAQjB,MAAK,iBAAoBI,KAAMU,GAE9D,C,+LCfKU,EAAQ,6BACRC,EAAO,mCAEAL,EAAe,mCAAG,uGAEdM,EAAAA,EAAAA,IAAA,UACRF,EADQ,uCAC+BC,EAD/B,MAFc,8EAMrB,IAAIE,MAAJ,MANqB,wDAAH,qDAWfC,EAAY,mCAAG,WAAMC,GAAN,0FAEXH,EAAAA,EAAAA,IAAA,UACRF,EADQ,mCAC2BC,EAD3B,4DACsFI,IAH3E,8EAMlB,IAAIF,MAAJ,MANkB,wDAAH,sDAUZG,EAAa,mCAAG,WAAM3B,GAAN,0FAEZuB,EAAAA,EAAAA,IAAA,UACRF,EADQ,oBACYrB,EADZ,oBAC0BsB,EAD1B,oBAFY,8EAMnB,IAAIE,MAAJ,MANmB,wDAAH,sDAUbI,EAAO,mCAAG,WAAM5B,GAAN,0FAENuB,EAAAA,EAAAA,IAAA,UACRF,EADQ,oBACYrB,EADZ,4BACkCsB,EADlC,oBAFM,gIAAH,sDAOPO,EAAU,mCAAG,WAAM7B,GAAN,0FAETuB,EAAAA,EAAAA,IAAA,UACRF,EADQ,oBACYrB,EADZ,4BACkCsB,EADlC,oBAFS,gIAAH,qD","sources":["components/FilmGallery/FilmGallery.styled.js","components/FilmGallery/FilmItem.js","components/FilmGallery/FilmGallery.js","pages/Home.js","servises/Fetchs.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink as LinkStyled } from 'react-router-dom';\nexport const Gallery = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport const Ul = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\n  gap: 16px;\n  list-style: none;\n  max-width: calc(65vw - 8px);\n  padding: 0;\n  margin: 0px auto;\n`;\nexport const LinkStyle = styled(LinkStyled)`\n  text-decoration: none;\n`;\nexport const Poster = styled.img`\n  width: 100%;\n`;\nexport const Title = styled.h3`\n  text-decoration: none;\n`;\n","import { LinkStyle, Poster, Title } from './FilmGallery.styled';\nimport PropTypes from 'prop-types';\nexport const FilmItem = ({ film: { title, name, poster_path, id }, from }) => {\n  const imageLink = `https://image.tmdb.org/t/p/w220_and_h330_face/${poster_path}`;\n  return (\n    <li>\n      <LinkStyle to={{ pathname: `/movies/${id}` }} state={{ from: from }}>\n        <Poster src={imageLink} alt={title}></Poster>\n        <Title>{title ? title : name}</Title>\n      </LinkStyle>\n    </li>\n  );\n};\nFilmItem.propTypes = {\n  film: PropTypes.object,\n  from: PropTypes.shape().isRequired,\n};\n","// import { useLocation } from 'react-router-dom';\nimport { Gallery, Ul } from './FilmGallery.styled';\nimport { FilmItem } from './FilmItem';\nimport PropTypes from 'prop-types';\nexport const FilmGallery = ({ films, title, from }) => {\n  return (\n    <Gallery>\n      <h2>{title}</h2>\n      <Ul>\n        {films.map(film => {\n          return <FilmItem key={film.id} film={film} from={from} />;\n        })}\n      </Ul>\n    </Gallery>\n  );\n};\nFilmGallery.propTypes = {\n  films: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import { FilmGallery } from 'components/FilmGallery/FilmGallery';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getPopularFilms } from 'servises/Fetchs';\nconst Home = () => {\n  const location = useLocation();\n  // console.log(location);\n  const [trends, setTrends] = useState([]);\n  useEffect(() => {\n    getPopularFilms().then(data => {\n      setTrends(data.data.results);\n    });\n  }, []);\n  return (\n    <FilmGallery films={trends} title={`Trending today`} from={location} />\n  );\n};\nexport default Home;\n","import axios from 'axios';\nconst BASE_URL = `https://api.themoviedb.org`;\nconst API_KEY = `203660b5f38f4dd17691a30662d2c12a`;\n//api.themoviedb.org/3/trending/all/day?api_key=<<api_key>>\nexport const getPopularFilms = async () => {\n  try {\n    return await axios.get(\n      `${BASE_URL}/3/trending/all/day?api_key=${API_KEY} `\n    );\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\n//api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\nexport const searchMovies = async searchName => {\n  try {\n    return await axios.get(\n      `${BASE_URL}/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${searchName}`\n    );\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n//api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\nexport const getDetailFilm = async id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n//api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\nexport const getCast = async id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {}\n};\nexport const getReviews = async id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {}\n};\n"],"names":["Gallery","styled","Ul","LinkStyle","LinkStyled","Poster","Title","FilmItem","film","title","name","poster_path","id","from","imageLink","to","pathname","state","src","alt","FilmGallery","films","map","location","useLocation","useState","trends","setTrends","useEffect","getPopularFilms","then","data","results","BASE_URL","API_KEY","axios","Error","searchMovies","searchName","getDetailFilm","getCast","getReviews"],"sourceRoot":""}